name: Windows Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-windows:
    name: Windows (Swift 5.10.1)
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Swift
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: "5.9.2"

      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v1

      - name: Setup Visual Studio environment
        run: |
          # Get the Visual Studio installation path
          $vsPath = & "C:\ProgramData\Chocolatey\bin\vswhere.exe" -products * -requires Microsoft.Component.MSBuild -property installationPath -latest

          # Set up Visual Studio environment
          $vcvarsall = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          if (Test-Path $vcvarsall) {
            # Run vcvarsall to set up environment variables
            cmd /c "`"$vcvarsall`" x64 && set" | ForEach-Object {
              if ($_ -match "^([^=]+)=(.*)$") {
                $name = $matches[1]
                $value = $matches[2]
                [Environment]::SetEnvironmentVariable($name, $value, "Process")
                echo "$name=$value" >> $env:GITHUB_ENV
              }
            }
          }
        shell: pwsh

      - name: Install zlib via Chocolatey
        run: |
          choco install zlib -y
        shell: pwsh

      - name: Set zlib paths
        run: |
          # Use Chocolatey-installed zlib
          echo "C_INCLUDE_PATH=C:\ProgramData\chocolatey\lib\zlib\tools\include" >> $env:GITHUB_ENV
          echo "LIB=C:\ProgramData\chocolatey\lib\zlib\tools\lib" >> $env:GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=C:\ProgramData\chocolatey\lib\zlib\tools\include" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Add MSVC lib path to LIB
        run: |
          $msvcLib = "$env:VCINSTALLDIR" + "Tools\MSVC\$env:VCToolsVersion\lib\x64"
          $windowsSdkLib = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\um\x64"
          $windowsSdkUcrt = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\ucrt\x64"
          echo "LIB=$env:LIB;$msvcLib;$windowsSdkLib;$windowsSdkUcrt" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Verify Swift installation
        run: |
          swift --version
          swift build --help
        shell: pwsh

      - name: Build and test
        run: |
          swift build -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift test --parallel -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
        shell: pwsh

      - name: Run specific test groups
        run: |
          swift test --filter CoreTests -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift test --filter ExtensionsTests -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift test --filter FileOperationsTests -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift test --filter ErrorHandlingTests -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift test --filter StreamingTests -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift test --filter ConcurrencyTests -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
        shell: pwsh

      - name: Build CLI tool
        run: |
          swift build --product SwiftZlibCLI -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
        shell: pwsh

  # Build verification - Windows
  build-verification-windows:
    name: Build Verification (Windows)
    strategy:
      matrix:
        configuration: [debug, release]
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Swift
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: "5.9.2"

      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v1

      - name: Setup Visual Studio environment
        run: |
          # Get the Visual Studio installation path
          $vsPath = & "C:\ProgramData\Chocolatey\bin\vswhere.exe" -products * -requires Microsoft.Component.MSBuild -property installationPath -latest

          # Set up Visual Studio environment
          $vcvarsall = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          if (Test-Path $vcvarsall) {
            # Run vcvarsall to set up environment variables
            cmd /c "`"$vcvarsall`" x64 && set" | ForEach-Object {
              if ($_ -match "^([^=]+)=(.*)$") {
                $name = $matches[1]
                $value = $matches[2]
                [Environment]::SetEnvironmentVariable($name, $value, "Process")
                echo "$name=$value" >> $env:GITHUB_ENV
              }
            }
          }
        shell: pwsh

      - name: Install zlib via Chocolatey
        run: |
          choco install zlib -y
        shell: pwsh

      - name: Set zlib paths
        run: |
          # Use Chocolatey-installed zlib
          echo "C_INCLUDE_PATH=C:\ProgramData\chocolatey\lib\zlib\tools\include" >> $env:GITHUB_ENV
          echo "LIB=C:\ProgramData\chocolatey\lib\zlib\tools\lib" >> $env:GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=C:\ProgramData\chocolatey\lib\zlib\tools\include" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Add MSVC lib path to LIB
        run: |
          $msvcLib = "$env:VCINSTALLDIR" + "Tools\MSVC\$env:VCToolsVersion\lib\x64"
          $windowsSdkLib = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\um\x64"
          $windowsSdkUcrt = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\ucrt\x64"
          echo "LIB=$env:LIB;$msvcLib;$windowsSdkLib;$windowsSdkUcrt" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Build and test package
        run: |
          swift build -c ${{ matrix.configuration }} -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift test -c ${{ matrix.configuration }} -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift build -c ${{ matrix.configuration }} --product SwiftZlibCLI -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
        shell: pwsh

  # Performance benchmarks - Windows
  benchmark-windows:
    name: Performance Benchmarks (Windows)
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Swift
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: "5.9.2"

      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v1

      - name: Setup Visual Studio environment
        run: |
          # Get the Visual Studio installation path
          $vsPath = & "C:\ProgramData\Chocolatey\bin\vswhere.exe" -products * -requires Microsoft.Component.MSBuild -property installationPath -latest

          # Set up Visual Studio environment
          $vcvarsall = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          if (Test-Path $vcvarsall) {
            # Run vcvarsall to set up environment variables
            cmd /c "`"$vcvarsall`" x64 && set" | ForEach-Object {
              if ($_ -match "^([^=]+)=(.*)$") {
                $name = $matches[1]
                $value = $matches[2]
                [Environment]::SetEnvironmentVariable($name, $value, "Process")
                echo "$name=$value" >> $env:GITHUB_ENV
              }
            }
          }
        shell: pwsh

      - name: Install zlib via Chocolatey
        run: |
          choco install zlib -y
        shell: pwsh

      - name: Set zlib paths
        run: |
          # Use Chocolatey-installed zlib
          echo "C_INCLUDE_PATH=C:\ProgramData\chocolatey\lib\zlib\tools\include" >> $env:GITHUB_ENV
          echo "LIB=C:\ProgramData\chocolatey\lib\zlib\tools\lib" >> $env:GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=C:\ProgramData\chocolatey\lib\zlib\tools\include" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Add MSVC lib path to LIB
        run: |
          $msvcLib = "$env:VCINSTALLDIR" + "Tools\MSVC\$env:VCToolsVersion\lib\x64"
          $windowsSdkLib = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\um\x64"
          $windowsSdkUcrt = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\ucrt\x64"
          echo "LIB=$env:LIB;$msvcLib;$windowsSdkLib;$windowsSdkUcrt" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Run performance tests
        run: |
          swift test --filter PerformanceTests --verbose -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift test --filter 'testCompressionPerformance' --verbose -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift test --filter 'testDecompressionPerformance' --verbose -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
          swift test --filter 'testMemoryEfficiency' --verbose -Xcc -I"C:\ProgramData\chocolatey\lib\zlib\tools\include"
        shell: pwsh
