name: Windows Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-windows:
    name: Windows (Swift 5.10.1)
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Swift
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: "5.9.2"

      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v1

      - name: Setup Visual Studio environment
        run: |
          # Get the Visual Studio installation path
          $vsPath = & "C:\ProgramData\Chocolatey\bin\vswhere.exe" -products * -requires Microsoft.Component.MSBuild -property installationPath -latest

          # Set up Visual Studio environment
          $vcvarsall = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          if (Test-Path $vcvarsall) {
            # Run vcvarsall to set up environment variables
            cmd /c "`"$vcvarsall`" x64 && set" | ForEach-Object {
              if ($_ -match "^([^=]+)=(.*)$") {
                $name = $matches[1]
                $value = $matches[2]
                [Environment]::SetEnvironmentVariable($name, $value, "Process")
                echo "$name=$value" >> $env:GITHUB_ENV
              }
            }
          }
        shell: pwsh

      - name: Use system zlib (no installation needed)
        run: |
          # Windows SDK includes zlib, we just need to find it
          $windowsSdkDir = "$env:WindowsSdkDir"
          $windowsSdkVersion = "$env:WindowsSDKVersion"

          echo "Windows SDK Dir: $windowsSdkDir"
          echo "Windows SDK Version: $windowsSdkVersion"

          # Try to find zlib in Windows SDK
          $possiblePaths = @(
            "$windowsSdkDir\include\$windowsSdkVersion\um",
            "$windowsSdkDir\include\$windowsSdkVersion\shared",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\$env:VCToolsVersion\include"
          )

          $found = $false
          foreach ($path in $possiblePaths) {
            echo "Checking path: $path"
            if (Test-Path "$path\zlib.h") {
              echo "Found zlib.h at $path"
              echo "C_INCLUDE_PATH=$path" >> $env:GITHUB_ENV
              echo "CPLUS_INCLUDE_PATH=$path" >> $env:GITHUB_ENV
              $found = $true
              break
            }
          }

          if (-not $found) {
            echo "zlib.h not found in any expected location"
            echo "Creating minimal zlib.h to avoid conflicts"

            # Create a minimal zlib.h that doesn't conflict
            $minimalZlibDir = "C:\minimal-zlib"
            New-Item -ItemType Directory -Force -Path $minimalZlibDir

            # Create minimal zlib.h content
            $content = "typedef unsigned char Bytef;`ntypedef unsigned int uInt;`ntypedef unsigned long uLong;`ntypedef long z_off_t;`n`n#define Z_OK 0`n#define Z_STREAM_END 1`n#define Z_NEED_DICT 2`n#define Z_ERRNO (-1)`n#define Z_STREAM_ERROR (-2)`n#define Z_DATA_ERROR (-3)`n#define Z_MEM_ERROR (-4)`n#define Z_BUF_ERROR (-5)`n#define Z_VERSION_ERROR (-6)`n`n#define Z_NO_FLUSH 0`n#define Z_PARTIAL_FLUSH 1`n#define Z_SYNC_FLUSH 2`n#define Z_FULL_FLUSH 3`n#define Z_FINISH 4`n#define Z_BLOCK 5`n#define Z_TREES 6`n`n#define Z_FILTERED 1`n#define Z_HUFFMAN_ONLY 2`n#define Z_RLE 3`n#define Z_FIXED 4`n#define Z_DEFAULT_STRATEGY 0`n`n#define Z_DEFAULT_COMPRESSION (-1)`n#define Z_DEFAULT_LEVEL (-2)`n`n#define Z_NULL 0`n`ntypedef struct z_stream_s {`n    const Bytef *next_in;`n    uInt avail_in;`n    uLong total_in;`n    Bytef *next_out;`n    uInt avail_out;`n    uLong total_out;`n    const char *msg;`n    struct internal_state *state;`n    void *zalloc;`n    void *zfree;`n    void *opaque;`n    int data_type;`n    uLong adler;`n    uLong reserved;`n} z_stream;`n`ntypedef z_stream *z_streamp;`n`nint compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen);`nint uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen);`nint compress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level);`n`nint deflateInit(z_streamp strm, int level);`nint deflate(z_streamp strm, int flush);`nint deflateEnd(z_streamp strm);`nint deflateInit2(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy);`n`nint inflateInit(z_streamp strm);`nint inflate(z_streamp strm, int flush);`nint inflateEnd(z_streamp strm);`nint inflateInit2(z_streamp strm, int windowBits);`n`nuLong adler32(uLong adler, const Bytef *buf, uInt len);`nuLong crc32(uLong crc, const Bytef *buf, uInt len);`nuLong compressBound(uLong sourceLen);`n`nconst char* zlibVersion(void);`nconst char* zError(int err);"

            $content | Out-File -FilePath "$minimalZlibDir\zlib.h" -Encoding ASCII
            echo "Created minimal zlib.h at $minimalZlibDir"
            echo "C_INCLUDE_PATH=$minimalZlibDir" >> $env:GITHUB_ENV
            echo "CPLUS_INCLUDE_PATH=$minimalZlibDir" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Add MSVC lib path to LIB
        run: |
          $msvcLib = "$env:VCINSTALLDIR" + "Tools\MSVC\$env:VCToolsVersion\lib\x64"
          $windowsSdkLib = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\um\x64"
          $windowsSdkUcrt = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\ucrt\x64"
          echo "LIB=$env:LIB;$msvcLib;$windowsSdkLib;$windowsSdkUcrt" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Verify Swift installation
        run: |
          swift --version
          swift build --help
        shell: pwsh

      - name: Build and test
        run: |
          swift build
          swift test --parallel
        shell: pwsh

      - name: Run specific test groups
        run: |
          swift test --filter CoreTests
          swift test --filter ExtensionsTests
          swift test --filter FileOperationsTests
          swift test --filter ErrorHandlingTests
          swift test --filter StreamingTests
          swift test --filter ConcurrencyTests
        shell: pwsh

      - name: Build CLI tool
        run: |
          swift build --product SwiftZlibCLI
        shell: pwsh

  # Build verification - Windows
  build-verification-windows:
    name: Build Verification (Windows)
    strategy:
      matrix:
        configuration: [debug, release]
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Swift
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: "5.9.2"

      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v1

      - name: Setup Visual Studio environment
        run: |
          # Get the Visual Studio installation path
          $vsPath = & "C:\ProgramData\Chocolatey\bin\vswhere.exe" -products * -requires Microsoft.Component.MSBuild -property installationPath -latest

          # Set up Visual Studio environment
          $vcvarsall = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          if (Test-Path $vcvarsall) {
            # Run vcvarsall to set up environment variables
            cmd /c "`"$vcvarsall`" x64 && set" | ForEach-Object {
              if ($_ -match "^([^=]+)=(.*)$") {
                $name = $matches[1]
                $value = $matches[2]
                [Environment]::SetEnvironmentVariable($name, $value, "Process")
                echo "$name=$value" >> $env:GITHUB_ENV
              }
            }
          }
        shell: pwsh

      - name: Use system zlib (no installation needed)
        run: |
          # Windows SDK includes zlib, we just need to find it
          $windowsSdkDir = "$env:WindowsSdkDir"
          $windowsSdkVersion = "$env:WindowsSDKVersion"

          echo "Windows SDK Dir: $windowsSdkDir"
          echo "Windows SDK Version: $windowsSdkVersion"

          # Try to find zlib in Windows SDK
          $possiblePaths = @(
            "$windowsSdkDir\include\$windowsSdkVersion\um",
            "$windowsSdkDir\include\$windowsSdkVersion\shared",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\$env:VCToolsVersion\include"
          )

          $found = $false
          foreach ($path in $possiblePaths) {
            echo "Checking path: $path"
            if (Test-Path "$path\zlib.h") {
              echo "Found zlib.h at $path"
              echo "C_INCLUDE_PATH=$path" >> $env:GITHUB_ENV
              echo "CPLUS_INCLUDE_PATH=$path" >> $env:GITHUB_ENV
              $found = $true
              break
            }
          }

          if (-not $found) {
            echo "zlib.h not found in any expected location"
            echo "Downloading zlib source and building manually"

            # Download zlib source from GitHub (more reliable)
            $zlibUrl = "https://github.com/madler/zlib/archive/refs/tags/v1.3.tar.gz"
            $zlibDir = "C:\zlib-src"

            New-Item -ItemType Directory -Force -Path $zlibDir
            Invoke-WebRequest -Uri $zlibUrl -OutFile "$zlibDir\zlib.tar.gz"

            # Extract using tar (available on Windows)
            tar -xzf "$zlibDir\zlib.tar.gz" -C $zlibDir

            # Find the extracted directory
            $extractedDir = Get-ChildItem -Path $zlibDir -Directory | Where-Object { $_.Name -like "zlib-*" } | Select-Object -First 1
            if ($extractedDir) {
              $zlibSrcDir = $extractedDir.FullName
              echo "Found zlib source at $zlibSrcDir"
              echo "C_INCLUDE_PATH=$zlibSrcDir" >> $env:GITHUB_ENV
              echo "CPLUS_INCLUDE_PATH=$zlibSrcDir" >> $env:GITHUB_ENV
            } else {
              echo "Failed to extract zlib source"
              exit 1
            }
          }
        shell: pwsh

      - name: Add MSVC lib path to LIB
        run: |
          $msvcLib = "$env:VCINSTALLDIR" + "Tools\MSVC\$env:VCToolsVersion\lib\x64"
          $windowsSdkLib = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\um\x64"
          $windowsSdkUcrt = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\ucrt\x64"
          echo "LIB=$env:LIB;$msvcLib;$windowsSdkLib;$windowsSdkUcrt" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Build and test package
        run: |
          swift build -c ${{ matrix.configuration }}
          swift test -c ${{ matrix.configuration }}
          swift build -c ${{ matrix.configuration }} --product SwiftZlibCLI
        shell: pwsh

  # Performance benchmarks - Windows
  benchmark-windows:
    name: Performance Benchmarks (Windows)
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Swift
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: "5.9.2"

      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v1

      - name: Setup Visual Studio environment
        run: |
          # Get the Visual Studio installation path
          $vsPath = & "C:\ProgramData\Chocolatey\bin\vswhere.exe" -products * -requires Microsoft.Component.MSBuild -property installationPath -latest

          # Set up Visual Studio environment
          $vcvarsall = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          if (Test-Path $vcvarsall) {
            # Run vcvarsall to set up environment variables
            cmd /c "`"$vcvarsall`" x64 && set" | ForEach-Object {
              if ($_ -match "^([^=]+)=(.*)$") {
                $name = $matches[1]
                $value = $matches[2]
                [Environment]::SetEnvironmentVariable($name, $value, "Process")
                echo "$name=$value" >> $env:GITHUB_ENV
              }
            }
          }
        shell: pwsh

      - name: Use system zlib (no installation needed)
        run: |
          # Windows SDK includes zlib, we just need to find it
          $windowsSdkDir = "$env:WindowsSdkDir"
          $windowsSdkVersion = "$env:WindowsSDKVersion"

          echo "Windows SDK Dir: $windowsSdkDir"
          echo "Windows SDK Version: $windowsSdkVersion"

          # Try to find zlib in Windows SDK
          $possiblePaths = @(
            "$windowsSdkDir\include\$windowsSdkVersion\um",
            "$windowsSdkDir\include\$windowsSdkVersion\shared",
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\$env:VCToolsVersion\include"
          )

          $found = $false
          foreach ($path in $possiblePaths) {
            echo "Checking path: $path"
            if (Test-Path "$path\zlib.h") {
              echo "Found zlib.h at $path"
              echo "C_INCLUDE_PATH=$path" >> $env:GITHUB_ENV
              echo "CPLUS_INCLUDE_PATH=$path" >> $env:GITHUB_ENV
              $found = $true
              break
            }
          }

          if (-not $found) {
            echo "zlib.h not found in any expected location"
            echo "Downloading zlib source and building manually"

            # Download zlib source from GitHub (more reliable)
            $zlibUrl = "https://github.com/madler/zlib/archive/refs/tags/v1.3.tar.gz"
            $zlibDir = "C:\zlib-src"

            New-Item -ItemType Directory -Force -Path $zlibDir
            Invoke-WebRequest -Uri $zlibUrl -OutFile "$zlibDir\zlib.tar.gz"

            # Extract using tar (available on Windows)
            tar -xzf "$zlibDir\zlib.tar.gz" -C $zlibDir

            # Find the extracted directory
            $extractedDir = Get-ChildItem -Path $zlibDir -Directory | Where-Object { $_.Name -like "zlib-*" } | Select-Object -First 1
            if ($extractedDir) {
              $zlibSrcDir = $extractedDir.FullName
              echo "Found zlib source at $zlibSrcDir"
              echo "C_INCLUDE_PATH=$zlibSrcDir" >> $env:GITHUB_ENV
              echo "CPLUS_INCLUDE_PATH=$zlibSrcDir" >> $env:GITHUB_ENV
            } else {
              echo "Failed to extract zlib source"
              exit 1
            }
          }
        shell: pwsh

      - name: Add MSVC lib path to LIB
        run: |
          $msvcLib = "$env:VCINSTALLDIR" + "Tools\MSVC\$env:VCToolsVersion\lib\x64"
          $windowsSdkLib = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\um\x64"
          $windowsSdkUcrt = "$env:WindowsSdkDir" + "lib\$env:WindowsSDKLibVersion\ucrt\x64"
          echo "LIB=$env:LIB;$msvcLib;$windowsSdkLib;$windowsSdkUcrt" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Run performance tests
        run: |
          swift test --filter PerformanceTests --verbose
          swift test --filter 'testCompressionPerformance' --verbose
          swift test --filter 'testDecompressionPerformance' --verbose
          swift test --filter 'testMemoryEfficiency' --verbose
        shell: pwsh
