name: Windows Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-windows:
    name: Windows (Windows Server 2022, Swift 5.10.1)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Swift for Windows
        run: |
          # Install Chocolatey first
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

          # Try to install Swift via Chocolatey
          try {
            Write-Host "Attempting to install Swift via Chocolatey..."
            choco install swift -y
            $env:PATH += ";C:\swift\bin"
            Write-Host "Swift installed via Chocolatey"
          }
          catch {
            Write-Host "Chocolatey installation failed, trying manual download..."

            # Manual download approach - try different sources
            $swiftUrls = @(
              "https://github.com/apple/swift/releases/download/swift-5.10.1-release/swift-5.10.1-RELEASE-windows10.exe",
              "https://github.com/apple/swift/releases/download/swift-5.10.0-release/swift-5.10.0-RELEASE-windows10.exe",
              "https://github.com/apple/swift/releases/download/swift-5.9.2-release/swift-5.9.2-RELEASE-windows10.exe"
            )

            $success = $false
            foreach ($url in $swiftUrls) {
              try {
                Write-Host "Trying Swift installer: $url"
                Invoke-WebRequest -Uri $url -OutFile "swift-installer.exe" -UseBasicParsing
                Start-Process -FilePath "swift-installer.exe" -ArgumentList "/S" -Wait
                Remove-Item "swift-installer.exe"
                $success = $true
                Write-Host "Successfully installed Swift from: $url"
                break
              }
              catch {
                Write-Host "Failed to download from: $url"
                Write-Host "Error: $($_.Exception.Message)"
              }
            }

            if (-not $success) {
              Write-Host "All download attempts failed. Installing Swift manually..."

              # Create Swift directory and download components manually
              New-Item -ItemType Directory -Force -Path "C:\swift"
              New-Item -ItemType Directory -Force -Path "C:\swift\bin"

              # Download Swift toolchain components
              $components = @(
                "swift.exe",
                "swiftc.exe",
                "swift-driver.exe"
              )

              foreach ($component in $components) {
                try {
                  $url = "https://github.com/apple/swift/releases/download/swift-5.10.1-release/$component"
                  Invoke-WebRequest -Uri $url -OutFile "C:\swift\bin\$component" -UseBasicParsing
                  Write-Host "Downloaded $component"
                }
                catch {
                  Write-Host "Failed to download $component"
                }
              }

              $env:PATH += ";C:\swift\bin"
            }
          }

      - name: Install zlib
        run: |
          # Install vcpkg
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat

          # Install zlib
          C:\vcpkg\vcpkg install zlib:x64-windows

      - name: Show Swift version
        run: |
          $env:PATH += ";C:\swift\bin"
          swift --version

      - name: Build package
        run: |
          $env:PATH += ";C:\swift\bin"
          swift build

      - name: Run all tests
        run: |
          $env:PATH += ";C:\swift\bin"
          swift test --verbose

      - name: Run specific test groups
        run: |
          $env:PATH += ";C:\swift\bin"
          swift test --filter CoreTests
          swift test --filter ExtensionsTests
          swift test --filter FileOperationsTests
          swift test --filter ErrorHandlingTests
          swift test --filter StreamingTests
          swift test --filter ConcurrencyTests

      - name: Build CLI tool
        run: |
          $env:PATH += ";C:\swift\bin"
          swift build --product SwiftZlibCLI

  # Build verification - Windows
  build-verification-windows:
    name: Build Verification (Windows)
    strategy:
      matrix:
        configuration: [debug, release]
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Swift for Windows
        run: |
          # Install Chocolatey first
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

          # Try to install Swift via Chocolatey
          try {
            Write-Host "Attempting to install Swift via Chocolatey..."
            choco install swift -y
            $env:PATH += ";C:\swift\bin"
            Write-Host "Swift installed via Chocolatey"
          }
          catch {
            Write-Host "Chocolatey installation failed, trying manual download..."

            # Manual download approach - try different sources
            $swiftUrls = @(
              "https://github.com/apple/swift/releases/download/swift-5.10.1-release/swift-5.10.1-RELEASE-windows10.exe",
              "https://github.com/apple/swift/releases/download/swift-5.10.0-release/swift-5.10.0-RELEASE-windows10.exe",
              "https://github.com/apple/swift/releases/download/swift-5.9.2-release/swift-5.9.2-RELEASE-windows10.exe"
            )

            $success = $false
            foreach ($url in $swiftUrls) {
              try {
                Write-Host "Trying Swift installer: $url"
                Invoke-WebRequest -Uri $url -OutFile "swift-installer.exe" -UseBasicParsing
                Start-Process -FilePath "swift-installer.exe" -ArgumentList "/S" -Wait
                Remove-Item "swift-installer.exe"
                $success = $true
                Write-Host "Successfully installed Swift from: $url"
                break
              }
              catch {
                Write-Host "Failed to download from: $url"
                Write-Host "Error: $($_.Exception.Message)"
              }
            }

            if (-not $success) {
              Write-Host "All download attempts failed. Installing Swift manually..."

              # Create Swift directory and download components manually
              New-Item -ItemType Directory -Force -Path "C:\swift"
              New-Item -ItemType Directory -Force -Path "C:\swift\bin"

              # Download Swift toolchain components
              $components = @(
                "swift.exe",
                "swiftc.exe",
                "swift-driver.exe"
              )

              foreach ($component in $components) {
                try {
                  $url = "https://github.com/apple/swift/releases/download/swift-5.10.1-release/$component"
                  Invoke-WebRequest -Uri $url -OutFile "C:\swift\bin\$component" -UseBasicParsing
                  Write-Host "Downloaded $component"
                }
                catch {
                  Write-Host "Failed to download $component"
                }
              }

              $env:PATH += ";C:\swift\bin"
            }
          }

      - name: Install zlib
        run: |
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg install zlib:x64-windows

      - name: Build package
        run: |
          $env:PATH += ";C:\swift\bin"
          swift build -c ${{ matrix.configuration }}

      - name: Test package
        run: |
          $env:PATH += ";C:\swift\bin"
          swift test -c ${{ matrix.configuration }}

      - name: Build CLI tool
        run: |
          $env:PATH += ";C:\swift\bin"
          swift build -c ${{ matrix.configuration }} --product SwiftZlibCLI

  # Performance benchmarks - Windows
  benchmark-windows:
    name: Performance Benchmarks (Windows)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Swift for Windows
        run: |
          # Install Chocolatey first
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

          # Try to install Swift via Chocolatey
          try {
            Write-Host "Attempting to install Swift via Chocolatey..."
            choco install swift -y
            $env:PATH += ";C:\swift\bin"
            Write-Host "Swift installed via Chocolatey"
          }
          catch {
            Write-Host "Chocolatey installation failed, trying manual download..."

            # Manual download approach - try different sources
            $swiftUrls = @(
              "https://github.com/apple/swift/releases/download/swift-5.10.1-release/swift-5.10.1-RELEASE-windows10.exe",
              "https://github.com/apple/swift/releases/download/swift-5.10.0-release/swift-5.10.0-RELEASE-windows10.exe",
              "https://github.com/apple/swift/releases/download/swift-5.9.2-release/swift-5.9.2-RELEASE-windows10.exe"
            )

            $success = $false
            foreach ($url in $swiftUrls) {
              try {
                Write-Host "Trying Swift installer: $url"
                Invoke-WebRequest -Uri $url -OutFile "swift-installer.exe" -UseBasicParsing
                Start-Process -FilePath "swift-installer.exe" -ArgumentList "/S" -Wait
                Remove-Item "swift-installer.exe"
                $success = $true
                Write-Host "Successfully installed Swift from: $url"
                break
              }
              catch {
                Write-Host "Failed to download from: $url"
                Write-Host "Error: $($_.Exception.Message)"
              }
            }

            if (-not $success) {
              Write-Host "All download attempts failed. Installing Swift manually..."

              # Create Swift directory and download components manually
              New-Item -ItemType Directory -Force -Path "C:\swift"
              New-Item -ItemType Directory -Force -Path "C:\swift\bin"

              # Download Swift toolchain components
              $components = @(
                "swift.exe",
                "swiftc.exe",
                "swift-driver.exe"
              )

              foreach ($component in $components) {
                try {
                  $url = "https://github.com/apple/swift/releases/download/swift-5.10.1-release/$component"
                  Invoke-WebRequest -Uri $url -OutFile "C:\swift\bin\$component" -UseBasicParsing
                  Write-Host "Downloaded $component"
                }
                catch {
                  Write-Host "Failed to download $component"
                }
              }

              $env:PATH += ";C:\swift\bin"
            }
          }

      - name: Install zlib
        run: |
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg install zlib:x64-windows

      - name: Run performance tests
        run: |
          $env:PATH += ";C:\swift\bin"
          swift test --filter PerformanceTests --verbose
          swift test --filter "testCompressionPerformance" --verbose
          swift test --filter "testDecompressionPerformance" --verbose
          swift test --filter "testMemoryEfficiency" --verbose
